category: ORM
questions:
    -   question: 'What is true about composite primary keys?'
        answers:
            - { value: The @Id annotation must be used on more than one column., correct: true }
            - { value: Composite keys must be avoided as much as possible., correct: true }
            - { value: Composite keys must only consist of the primitives types integer and string., correct: true }
            - { value: An auto increment strategy can be used for one of the key using the @GeneratedValue annotation., correct: false }
        help: |
            http://docs.doctrine-project.org/projects/doctrine-orm/en/latest/reference/basic-mapping.html#composite-keys
            http://docs.doctrine-project.org/projects/doctrine-orm/en/latest/reference/best-practices.html#avoid-composite-keys
            http://docs.doctrine-project.org/projects/doctrine-orm/en/latest/tutorials/composite-primary-keys.html#general-considerations

    -   question: 'You query for an object joining on a single-valued association object that is configured LAZY.'
        answers:
            - { value: Doctrine will create a proxy of this association object., correct: false }
            - { value: Doctrine will eager load this association object., correct: true }

    -   question: 'What is the default change tracking policy?'
        answers:
            - { value: NOTIFY, correct: false }
            - { value: DEFERRED_EXPLICIT, correct: false }
            - { value: DEFERRED_IMPLICIT, correct: true }

    -   question: |
            Considering the following code, which assertions are true?

            $object = $this->entityManager->getReference('App\Entity\User', 1);
        answers:
            - { value: $object is an instance of App\Entity\User., correct: true }
            - { value: $object is an instance of Doctrine\ORM\Proxy\Proxy., correct: true }
            - { value: $object is an instance of Doctrine\ORM\Reference., correct: false }
            - { value: $object is an instance of Proxies\__CG__\App\Entity\User, correct: true }

    -   question: 'Which of the following rules are true about bidirectional associations ?'
        answers:
            - value: |
                The owning side has to use the mappedBy attribute and the inverse side the inversedBy attribute
                of the OneToOne, ManyToOne, or ManyToMany mapping declaration.
              correct: false
            - value: |
                 OneToMany is always the owning side and ManyToOne the inverse side of a bidirectional association.
              correct: false
            - value: |
                The inverse side has to use the mappedBy attribute and the owning side the inversedBy attribute of
                the OneToOne, ManyToOne, or ManyToMany mapping declaration.
              correct: true
            - value: |
                ManyToOne is always the owning side and OneToMany the inverse side of a bidirectional association.
              correct: true

    -   question: |
            What is wrong with this repository method ?

            public function filterBooks(array $filters)
            {
                $qb = $this->createQueryBuild('b');
                $qb->where('b.year = :year');
                $qb->setParameters(['year' => $filters['year']]);

                $qb->andWhere('b.gender = :gender');
                $qb->setParameters(['gender' => $filters['gender']]);

                return $qb->getResults();
        answers:
            - value: |
                  The method getResults does not exists. You should use getResult().
              correct: true
            - value: |
                  The query builder does not have a getResults() method.
                  You should use getQuery().
              correct: true
            - value: |
                  $qb is never updated after its initialization.
                  You should do methods chaining.
              correct: false
            - value: |
                  The second call setParameters(...) will erase data set in the first call.
                  So year will be deleted from the parameters list. You should use setParameter($name, $value).
              correct: true
