category: Forms
questions:
    -   question: |
            Which types are allowed for the choice_attr option of the
            Symfony\\Component\\Form\\Extension\\Core\\Type\\ChoiceType form type ?"
        answers:
            - { value: array, correct: true }
            - { value: callable, correct: true }
            - { value: string, correct: true }
            - { value: integer, correct: false }
            - { value: boolean, correct: false }
    -   question: "How to customize the validation error message of the validation error caused by a TransformationFailedException ?"
        answers:
            - {value: "It's not possible", correct: false}
            - {value: 'The exception message will be used as the validation error message', correct: false}
            - {value: 'By using the invalid_message option', correct: true}
    -   question: 'Are Data Transformers applied on a form field which has the inherit_data option set ?'
        answers:
            - {value: 'Yes', correct: false}
            - {value: 'No', correct: true}

    -   question: "If you need to modify the data given during pre-population or modify a form depending on the pre-populated data (adding or removing fields dynamically), to which event your code should be hooked?"
        answers:
            - {value: "FormEvents::POST_SET_DATA", correct: false}
            - {value: 'FormEvents::SUBMIT', correct: false}
            - {value: 'FormEvents::PRE_SET_DATA', correct: true}
            - {value: 'FormEvents::PRE_SUBMIT', correct: false}
            - {value: 'FormEvents::POST_SUBMIT', correct: false}

    -   question: "Which of theses are not options available in every FormType?"
        answers:
            - {value: "is_required", correct: true}
            - {value: "compound", correct: false}
            - {value: 'by_reference', correct: false}
            - {value: 'action', correct: false}
            - {value: 'trim', correct: false}
            - {value: 'attributes', correct: true}

    -   question: "Which of the following are built-in Symfony form events?"
        answers:
            - {value: "FormEvents::PRE_SET_DATA", correct: true}
            - {value: "FormEvents::POST_SET_DATA", correct: true}
            - {value: 'FormEvents::SUBMIT_DATA', correct: false}
            - {value: 'FormEvents::PRE_SUBMIT', correct: true}
            - {value: 'FormEvents::SUBMIT', correct: true}
            - {value: 'FormEvents::POST', correct: false}
            - {value: 'FormEvents::POST_SUBMIT', correct: true}
            - {value: 'FormEvents::POST_DATA', correct: false}

    -   question: "Which of the following snipets is valid to set the maximum and minimum value for a Symfony\\Component\\Form\\Extension\\Core\\Type\\RangeType form type ?"
        answers:
            -   value: |
                    $formBuilder->add('name', RangeType::class, [
                        'min' => 5,
                        'max' => 50
                    ]);
                correct: false
            -   value: |
                    $formBuilder->add('name', RangeType::class, [
                        'attr' => [
                            'minimum' => 5,
                            'maximum' => 50
                        ]
                    ]);
                correct: false
            -   value: |
                    $formBuilder->add('name', RangeType::class, [
                        'attr' => [
                            'min' => 5,
                            'max' => 50
                        ]
                    ]);
                correct: true
            -   value: |
                    $formBuilder->add('name', RangeType::class, [
                        'minimum' => 5,
                        'maximum' => 50
                    ]);
                correct: false
            -   value: |
                    $formBuilder->add('name', RangeType::class, [
                        'min' => 5,
                        'max' => 50
                    ]);
                correct: false

    -   question: "How to get the value of title set in a form?"
        answers:
            -   value: |
                    {{ form.title.vars.value }}
                correct: true
            -   value: |
                    {{ form.vars.title }}
                correct: false
            -   value: |
                    {{ form.vars.title.value }}
                correct: false
            -   value: |
                    {{ form.title }}
                correct: false
    -   question: |
            By default, which function provides the choices of the Symfony\Component\Form\Extension\Core\Type\LanguageType form type ?
        answers:
            - { value: Symfony\Component\Intl\Intl::getLanguageBundle()->getLanguageNames(), correct: true }
            - { value: Intl::getLanguages(), correct: false }
            - { value: Symfony\Component\Locale\getDisplayLanguages(), correct: false }
            - { value: Symfony\Component\Form\Extension\Core\Type\LanguageType::getChoices(), correct: false }

    -   question: "According to the official Symfony Best Practices Guide, in which namespace do you need to put the form type classes?"
        answers:
            - { value: AppBundle\FormType\Form, correct: false }
            - { value: AppBundle\Form, correct: true }
            - { value: AppBundle\Form\Type, correct: false }
            - { value: AppBundle\FormType, correct: false }

    -   question: "Which is the correct way to add an extension MyForm to the Form component?"
        answers:
            -   value: |
                    use Symfony\Component\Form\Forms;

                    $formFactory = Forms::createFormFactoryBuilder()
                    ->addExtension(new MyFormExtension())
                    ->getFormFactory();
                correct: true
            -   value: |
                    use Symfony\Component\Form\Forms;

                    $formFactory = Forms::createFormFactoryBuilder()
                    ->registerExtension(new MyFormExtension())
                    ->getFormFactory();
                correct: false
            -   value: |
                    use Symfony\Component\Form\Forms;

                    $formFactory = Forms::createFormFactoryBuilder()
                    ->addExtension('text', new MyFormExtension())
                    ->getFormFactory();
                correct: false
            -   value: |
                    use Symfony\Component\Form\Forms;

                    $formFactory = Forms::createFormFactoryBuilder()
                    ->add(new MyFormExtension())
                    ->getFormFactory();
                correct: false

    -   question: "What are prerequisites to create a FormExtension in a Symfony Fullstack project using FrameworkBundle?"
        answers:
            -   value: |
                    Extending the Symfony\Component\Form\AbstractTypeExtension
                correct: true
            -   value: |
                    Creating a service with the form.type_extension tag
                correct: true
            -   value: |
                    Putting the new MyFormExtension class in the Form\Extension namespace
                correct: false
            -   value: |
                    Implementing the interface Symfony\Component\Form\FormTypeExtensionInterface
                correct: true

    -   question: "Which interface should be implemented when you want to set the choice_loader option of the Symfony\\Component\\Form\\Extension\\Core\\Type\\ChoiceType form type ?"
        answers:
            -   value: |
                    Symfony\Component\Form\Extension\Core\ChoiceLoaderInterface
                correct: false
            -   value: |
                    Symfony\Component\Form\ChoiceLoaderInterface
                correct: false
            -   value: |
                    Symfony\Component\Form\ChoiceList\Loader\ChoiceLoaderInterface
                correct: true

    -   question: "How do you prevent form_end from rendering the rest of the fields?"
        answers:
            -   value: |
                    {{ form_end(form, {'render_rest': false}) }}
                correct: true
            -   value: |
                    This is not possible
                correct: false
            -   value: |
                    {{ form_end(form, false) }}
                correct: false
            -   value: |
                    {{ form_end(form, 0, false) }}
                correct: false

    -   question: "What will a call to {{ form(form) }} result in?"
        answers:
            -   value: "The rendering of the FormView into a whole HTML form"
                correct: true
            -   value: "An error"
                correct: false
            -   value: "The rendering of the first field in the form"
                correct: false

    -   question: "Which of the following are valid form functions for rendering the FormView?"
        answers:
            -   value: "{{ form_start(form) }}"
                correct: true
            -   value: "{{ form_errors(form) }}"
                correct: true
            -   value: "{{ form_row(form.field) }}"
                correct: true
            -   value: "{{ form_end(form) }}"
                correct: true
            -   value: "{{ form_widget(form.field) }}"
                correct: true
            -   value: "{{ form_help(form.field) }}"
                correct: true
            -   value: "{{ form_errors(form.field) }}"
                correct: true
            -   value: "{{ form_validation(form.field) }}"
                correct: false
            -   value: "{{ form_begin(form) }}"
                correct: false
            -   value: "{{ form_close(form) }}"
                correct: false
            -   value: "{{ form_field(form.field) }}"
                correct: false

    -   question: |
            What will be the value of form.field.vars.attr.class after running:

            {{ form_widget(form, { 'attr': {'class': 'foo'} }) }}
        answers:
            -   value: "foo"
                correct: false
            -   value: "It will not contain a valid, or it will contain the value configured earlier"
                correct: true

    -   question: 'How would the id of the task field be accessed in Twig?'
        answers:
            -   value: "{{ form.task.vars.id }}"
                correct: true
            -   value: "{{ form.task.id }}"
                correct: false
            -   value: "{{ form.task.vars.fields.id }}"
                correct: false
            -   value: "{{ form.fields.task.vars.id }}"
                correct: false

    -   question: 'What is the recommended way to customise the rendering of all usages of a field in an application?'
        answers:
            -   value: "Using a form theme"
                correct: true
            -   value: "Using functions in Twig templates were the forms are used"
                correct: false

    -   question: 'How could you adjust the HTTP method of a form is rendered in a Twig template?'
        answers:
            -   value: "{{ form(form, {'method': 'GET'}) }}"
                correct: true
            -   value: "{{ form(form, {'http_method': 'GET'}) }}"
                correct: false
            -   value: "{{ form(form, 'GET') }}"
                correct: false
            -   value: "{{ form(form, false, 'GET') }}"
                correct: false

    -   question: 'Which Twig form function handles only rendering the first <form> tag?'
        answers:
            -   value: "{{ form_start(form) }}"
                correct: true
            -   value: "{{ form_tag(form) }}"
                correct: false
            -   value: "{{ form_first(form) }}"
                correct: false

    -   question: 'How could you adjust the HTTP method of a form is rendered in a Twig template?'
        answers:
            -   value: "{{ form_start(form, {'method': 'GET'}) }}"
                correct: true
            -   value: "{{ form_start(form, {'http_method': 'GET'}) }}"
                correct: false
            -   value: "{{ form_start(form, 'GET') }}"
                correct: false
            -   value: "{{ form_start(form, false, 'GET') }}"
                correct: false

    -   question: 'Which Twig form function handles only rendering the last </form> tag?'
        answers:
            -   value: "{{ form_end(form) }}"
                correct: true
            -   value: "{{ form_close(form) }}"
                correct: false
            -   value: "{{ form_tag_end(form) }}"
                correct: false

    -   question: 'Which Twig form function handles only rendering the label for a form field?'
        answers:
            -   value: "{{ form_label(form) }}"
                correct: true
            -   value: "{{ form_widget(form) }}"
                correct: false
            -   value: "{{ label_form(form) }}"
                correct: false

    -   question: 'Which of the following are valid ways to customise the label of a form field within a Twig template?'
        answers:
            -   value: "{{ form_label(form.name, 'Updated field') }}"
                correct: true
            -   value: "{{ form_label(form.name, null, 'Updated field') }}"
                correct: false
            -   value: "{{ label_form(form, 'Updated field') }}"
                correct: false
            -   value: "{{ label_form(form, null, 'Updated field') }}"
                correct: false
            -   value: "{{ form_label(form.name, null, {'label': 'Updated field'}) }}"
                correct: true
            -   value: "{{ form_label(form.name, {'label': 'Updated field'}) }}"
                correct: false
            -   value: "{{ label_form(form.name, {'label': 'Updated field'}) }}"
                correct: false

    -   question: 'How would you add the HTML class foo to the form.name field?'
        answers:
            -   value: "{{ form_label(form.name, null, {'label_attr': {'class': 'foo'}}) }}"
                correct: true
            -   value: "{{ form_label(form.name, null, {'class': 'foo'}) }}"
                correct: false
            -   value: "{{ form_label(form.name, {'class': 'foo'}) }}"
                correct: false
            -   value: "{{ form_label(form.name, {'label_attr': {'class': 'foo'}}) }}"
                correct: false

    -   question: 'Which Twig form function handles only rendering the help text for a form field?'
        answers:
            -   value: "{{ form_help(form.name) }}"
                correct: true
            -   value: "{{ help_form(form.name) }}"
                correct: false
            -   value: "{{ form_help_text(form.name) }}"
                correct: false
            -   value: "{{ form_help(form) }}"
                correct: false

    -   question: 'Which Twig form function handles only rendering the form errors for a form field?'
        answers:
            -   value: "{{ form_errors(form.name) }}"
                correct: true
            -   value: "{{ form_errors(form) }}"
                correct: false
            -   value: "{{ errors_form(form.name) }}"
                correct: false
            -   value: "{{ form_errors_text(form.name) }}"
                correct: false

    -   question: 'Which Twig form function handles rendering the HTML tag for the field?'
        answers:
            -   value: "{{ form_widget(form.name) }}"
                correct: false
            -   value: "{{ form_widget(form) }}"
                correct: true
            -   value: "{{ widget_form(form.name) }}"
                correct: false
            -   value: "{{ form_html_widget(form.name) }}"
                correct: false
            -   value: "{{ form_html_widget(form) }}"
                correct: false

    -   question: "Which Twig form function handles returning a forms view's parent?"
        answers:
            -   value: "{{ form_parent(form) }}"
                correct: true
            -   value: "{{ parent_form_form(form) }}"
                correct: false
            -   value: "{{ form_get_parent(form) }}"
                correct: false
            -   value: "{{ form_parent_or_null(form) }}"
                correct: false
            -   value: "{{ parent(form) }}"
                correct: false

    -   question: "If you need to change request data before binding them to the form, which event should you use?"
        answers:
            -   value: "FormEvents::POST_SET_DATA"
                correct: false
            -   value: "FormEvents::PRE_SET_DATA"
                correct: false
            -   value: "FormEvents::PRE_SUBMIT"
                correct: true
            -   value: "FormEvents::POST_SUBMIT"
                correct: false

    -   question: |
            Does a Symfony\Component\Form\Exception\TransformationFailedException thrown in a DataTransformer cause a validation error ?
        answers:
            -   value: "Yes"
                correct: true
            -   value: "No"
                correct: false

    -   question: |
            Which of these form types does not inherit from the Symfony\Component\Form\Extension\Core\Type\TextType type ?
        answers:
            -   value: Symfony\Component\Form\Extension\Core\Type\SearchType
                correct: false
            -   value: Symfony\Component\Form\Extension\Core\Type\RangeType
                correct: false
            -   value: Symfony\Component\Form\Extension\Core\Type\LocaleType
                correct: true
            -   value: Symfony\Component\Form\Extension\Core\Type\PasswordType
                correct: false
            -   value: Symfony\Component\Form\Extension\Core\Type\HiddenType
                correct: true
        help:
            https://symfony.com/doc/current/reference/forms/types/range.html

    -   question: |
            With the following code, what can be set as the value of the choice_label option to display the name
            property of each choice ?

            class Post
            {
                private $name;
                public function __construct($name)
                {
                     $this->name = $name;
                }
                public function getName()
                {
                    return $this->name;
                }
            }

            $formBuilder->add('posts', ChoiceType::class, [
                'choices' => [new Post('foo'), new Post('bar')]
                'choice_label' => /* ... */
            ]);
        answers:
            -   value: |
                    false
                correct: false
            -   value: Post::getName
                correct: false
            -   value: 'name'
                correct: true
            -   value: |
                    function ($value, $key, $index) {
                        return $value->getName();
                    }
                correct: true
            -   value: |
                    function ($values, $key, $index) {
                        return $values[$key];
                    }
                correct: false
        help: |
            http://symfony.com/doc/current/reference/forms/types/choice.html#choice-label

    -   question: |
            Which of these options are valid for a Symfony\Component\Form\Extension\Core\Type\CollectionType form type ?
        answers:
            - { value: allow_add, correct: true }
            - { value: allow_delete, correct: true }
            - { value: allow_remove, correct: false }
            - { value: allow_create, correct: false }
            - { value: allow_update, correct: false }

    -   question: |
            Which of these options are valid for a Symfony\Component\Form\Extension\Core\Type\CollectionType form type ?
        answers:
            - { value: entry_options, correct: true }
            - { value: delete_empty, correct: true }
            - { value: entry_options, correct: true }
            - { value: allow_delete, correct: true }
            - { value: entry_type, correct: true }
            - { value: allow_remove, correct: false }
            - { value: allow_create, correct: false }
            - { value: allow_update, correct: false }

    -   question: |
            Which of the following snipets is valid to set the maximum and minimum value for a
            Symfony\Component\Form\Extension\Core\Type\RangeType form type ?
        answers:
            -   value: |
                    $formBuilder->add('name', RangeType::class, [
                        'attr' => [
                            'minimum' => 5,
                            'maximum' => 50
                        ]
                    ]);
                correct: false
            -   value: |
                    $formBuilder->add('name', RangeType::class, [
                        'attr' => [
                            'min' => 5,
                            'max' => 50
                        ]
                    ]);
                correct: true
            -   value: |
                    $formBuilder->add('name', RangeType::class, [
                        'min' => 5,
                        'max' => 50
                    ]);
                correct: false
            -   value: |
                    $formBuilder->add('name', RangeType::class, [
                        'minimum' => 5,
                        'maximum' => 50
                    ]);
                correct: false

    -   question: |
            Which of the following form types is the parent of the Symfony\Component\Form\Extension\Core\Type\BirthdayType form type ?
        answers:
            - { value: Symfony\Component\Form\Extension\Core\Type\DateType, correct: true }
            - { value: Symfony\Component\Form\Extension\Core\Type\DateTimeType, correct: false }
            - { value: Symfony\Component\Form\Extension\Core\Type\TimeType, correct: false }

    -   question: Among the following, which one is not a built-in type?
        answers:
            - { value: PasswordType, correct: false }
            - { value: MoneyType, correct: false }
            - { value: NumberType, correct: false }
            - { value: IbanType, correct: true }

    -   question: Which of these extensions are a built-in ones ?
        answers:
            - { value: HttpFoundationRequestHandler, correct: true }
            - { value: HttpFoundationExtension, correct: true }
            - { value: DependencyInjectionExtension, correct: true }
            - { value: DataCollectorExtension, correct: true }

    -   question: What is the use of the default_protocol option of the Symfony\Component\Form\Extension\Core\Type\UrlType form type ?
        answers:
            - { value: To prepend the submitted value with an URI scheme (eg. http://) if it does not begin with one., correct: true }
            - { value: To render the input with the placeholder property containing the value of the option., correct: false }
            - { value: To force the submitted value to begin with a given URI scheme (eg. http://)., correct: false }

    -   question: Which FormConfigBuilderInterface method should be called to attach a model transformer to a form?
        answers:
            - { value: addModelTransformer, correct: true }
            - { value: newModelTransformer, correct: false }
            - { value: attachModelTransformer, correct: false }
            - { value: appendModelTransformer, correct: false }

    -   question: Which of the following are component built in model transformers?
        answers:
            - { value: CallbackTransformer, correct: true }
            - { value: ReverseTransformer, correct: false }
            - { value: DateTimeTransformer, correct: false }
            - { value: StringTransformer, correct: false }
            - { value: EntityTransformer, correct: false }
            - { value: ObjectTransformer, correct: false }
            - { value: BooleanTransformer, correct: false }

    -   question: Which type does not correspond to a button?
        answers:
            - { value: reset, correct: false }
            - { value: input, correct: true }
            - { value: button, correct: false }
            - { value: submit, correct: false }

    -   question: |
            Assuming an application that stores money amounts multiplied by 100 (eg. 1.23 is stored 123).

            What option should you set on the Symfony\Component\Form\Extension\Core\Type\MoneyType form type in order to display the correct value to the user ?
        answers:
            - { value: scale, correct: false }
            - { value: by_reference, correct: false }
            - { value: multiply, correct: false }
            - { value: divisor, correct: true }

    -   question: |
            If the expanded and multiple options are set to true on a Symfony\Component\Form\Extension\Core\Type\ChoiceType form type, what is displayed when rendering the form ?
        answers:
            - { value: Select tag., correct: false }
            - { value: Radio buttons., correct: false }
            - { value: Select tag (with multiple attribute)., correct: false }
            - { value: Checkboxes., correct: true }

    -   question: |
            What are the prerequisites to creating a form type extension?
        answers:
            - { value: Extending AbstractTypeExtension, correct: true }
            - { value: Implementing FormTypeExtensionInterface., correct: true }
            - { value: Implementing the getExtendedTypes() method, correct: true }
            - { value: using the tag form.type_extension, correct: true }
            - { value: using the tag form.extension, correct: false }
            - { value: Implementing the getExtendedType() method, correct: false }
            - { value: Extending TypeExtension, correct: false }

    -   question: |
            How could one use the CLI to verify the configuration of their new type extension?
        answers:
            - { value: php bin/console debug:form, correct: true }
            - { value: php bin/console form:debug, correct: false }
            - { value: php bin/console form:type-extensions:view, correct: false }
            - { value: php bin/console debug:services, correct: false }
            - { value: php bin/console services:debug, correct: false }

    -   question: |
            What method of a type extension allow one to override the options of a form type?
        answers:
            - { value: configureOptions(OptionsResolver $resolver), correct: true }
            - { value: overrideOptions(OptionsResolver $resolver), correct: false }
            - { value: configureOptionResolver(OptionsResolver $resolver), correct: false }
            - { value: overrideOptionResolver(OptionsResolver $resolver), correct: false }

    -   question: |
            What method of a type extension allow one to override the generated form view?
        answers:
            - { value: "buildView(FormView $view, FormInterface $form, array $options)", correct: true }
            - { value: "buildView(FormInterface $form, FormView $view, array $options)", correct: false }
            - { value: "overrideView(FormInterface $form, FormView $view, array $options)", correct: false }
            - { value: "overrideView(FormView $view, FormInterface $form, array $options)", correct: false }

    -   question: |
            What is the block one must override to change the markup of the FileType?
        answers:
            - { value: "file_widget", correct: true }
            - { value: "files_widget", correct: false }
            - { value: "file_type_widget", correct: false }
            - { value: "_form_file_type_widget", correct: false }

    -   question: |
            Do form types extended in a form extension respect parent values of types?
        answers:
            - { value: "Yes", correct: true }
            - { value: "No", correct: false }

    -   question: |
            Which of the following are valid method on the FormTypeExtensionInterface in Symfony 3.4?
        answers:
            - { value: "public function buildForm(FormBuilderInterface $builder, array $options);", correct: true }
            - { value: "public function buildForm(FormBuilder $builder, array $options);", correct: false }
            - { value: "public function buildView(FormView $view, FormInterface $form, array $options);", correct: true }
            - { value: "public function buildView(FormInterface $form, FormView $view, array $options);", correct: false }
            - { value: "public function finishView(FormView $view, FormInterface $form, array $options);", correct: true }
            - { value: "public function finishView(FormInterface $form, FormView $view, array $options);", correct: false }
            - { value: "public function configureOptions(OptionsResolver $resolver);", correct: true }
            - { value: "public function configureOptionResolver(OptionsResolver $resolver);", correct: false }
            - { value: "public function getExtendedType();", correct: true }
            - { value: "public function getExtendedTypes();", correct: false }
