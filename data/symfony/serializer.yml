category: Serializer
questions:
    -   question: "What is the way to initialize the ClassMetadataFactory in order to use annotations for the definitions of serialization?"
        answers:
            -   value: |
                    use Symfony\Component\Serializer\Mapping\Factory\ClassMetadataFactory;
                    use Doctrine\Common\Annotations\AnnotationReader;
                    use Symfony\Component\Serializer\Mapping\Loader\AnnotationLoader;

                    $classMetadataFactory = new ClassMetadataFactory(new AnnotationReader(new AnnotationLoader()));
                correct: false

            -   value: |
                    use Symfony\Component\Serializer\Mapping\Factory\ClassMetadataFactory;
                    use Doctrine\Common\Annotations\AnnotationReader;
                    use Symfony\Component\Serializer\Mapping\Loader\AnnotationLoader;

                    $classMetadataFactory = new ClassMetadataFactory(new AnnotationLoader(new AnnotationReader()));
                correct: true

            -   value: |
                    use Symfony\Component\Serializer\Mapping\Factory\ClassMetadataFactory;
                    use Symfony\Component\Serializer\Mapping\Loader\AnnotationLoader;

                    $classMetadataFactory = new ClassMetadataFactory(new AnnotationLoader());
                correct: false

    -   question: |
            With the following code:

            use Acme\Person;

            $person1 = new Person();
            $person1->setName('foo');
            $person1->setAge(99);
            $person1->setSportsman(false);

            $person2 = new Person();
            $person2->setName('bar');
            $person2->setAge(33);
            $person2->setSportsman(true);

            $persons = array($person1, $person2);
            $data = $serializer->serialize($persons, 'json');
            PHP
            what is the correct way to deserialize the $data into an $persons array of Acme\Person objects?
        answers:
            -   value: |
                    use Symfony\Component\Serializer\Encoder\JsonEncoder;
                    use Symfony\Component\Serializer\Normalizer\ArrayDenormalizer;
                    use Symfony\Component\Serializer\Normalizer\GetSetMethodNormalizer;
                    use Symfony\Component\Serializer\Serializer;

                    $serializer = new Serializer(
                    array(new GetSetMethodNormalizer(), new ArrayDenormalizer()),
                    array(new JsonEncoder())
                    );

                    $persons = $serializer->deserialize($data, 'Acme\Person', 'json', true);
                correct: false

            -   value: |
                    use Symfony\Component\Serializer\Encoder\JsonEncoder;
                    use Symfony\Component\Serializer\Normalizer\ArrayDenormalizer;
                    use Symfony\Component\Serializer\Normalizer\GetSetMethodNormalizer;
                    use Symfony\Component\Serializer\Serializer;

                    $serializer = new Serializer(
                    array(new GetSetMethodNormalizer(), new ArrayDenormalizer()),
                    array(new JsonEncoder())
                    );

                    $persons = $serializer->deserialize($data, 'Acme\Person[]', 'json');
                correct: true

            -   value: |
                    use Symfony\Component\Serializer\Encoder\JsonEncoder;
                    use Symfony\Component\Serializer\Normalizer\ArrayDenormalizer;
                    use Symfony\Component\Serializer\Normalizer\GetSetMethodNormalizer;
                    use Symfony\Component\Serializer\Serializer;

                    $serializer = new Serializer(
                        array(new GetSetMethodNormalizer(), new ArrayDenormalizer()),
                        array(new JsonEncoder())
                    );

                    $persons = array();
                    $persons = $serializer->deserialize($data, 'Acme\Person', 'json', $persons);
                correct: false

            -   value: |
                    use Symfony\Component\Serializer\Encoder\JsonEncoder;
                    use Symfony\Component\Serializer\Normalizer\ArrayDenormalizer;
                    use Symfony\Component\Serializer\Normalizer\GetSetMethodNormalizer;
                    use Symfony\Component\Serializer\Serializer;

                    $serializer = new Serializer(
                        array(new GetSetMethodNormalizer(), new ArrayDenormalizer()),
                        array(new JsonEncoder())
                    );

                    $persons = $serializer->deserialize($data, 'Acme\Person[]', 'json', 'array');
                correct: false

    -   question: "Which of these methods are automatically detected and used by the Serializer ?"
        answers:
            -   value:  remove*
                correct: true
            -   value:  get*
                correct: true
            -   value:  has*
                correct: true
            -   value: add*
                correct: true
            -   value: is*
                correct: true

    -   question: "Which of these methods are automatically detected and used by the Serializer ?"
        answers:
            -   value:  remove*
                correct: true
            -   value:  get*
                correct: true
            -   value:  has*
                correct: true
            -   value: add*
                correct: true
            -   value: is*
                correct: true

    -   question: "What is the signature of the Serializer constructor?"
        answers:
            -   value:  __construct(array $normalizers = [], array $encoders = [])
                correct: true
            -   value:  __construct(array $encoders = [], array $normalizers = [])
                correct: false
            -   value:  __construct(EncoderCollection $encoders, NormalizerCollection $normalizers)
                correct: false
            -   value: __construct(NormalizerCollection $normalizers, EncoderCollection $encoders)
                correct: false

    -   question: "What is the signature of Serializer::serialize?"
        answers:
            -   value:  serialize($data, $format, array $context = [])
                correct: true
            -   value:  serialize($data, array $context, $format)
                correct: false
            -   value:  serialize(array $context, $format, $data)
                correct: false

    -   question: "What is the signature of Serializer::serialize?"
        answers:
            -   value:  deserialize($data, $type, $format, array $context = [])
                correct: true
            -   value:  deserialize($data, $format, $type, array $context = [])
                correct: false
            -   value:  deserialize($format, $data, $type, array $context = [])
                correct: false

    -   question: |
            class Person {
                public $name;
                public $age;
            }

            $data = <<<EOF
            <person>
                <name>foo</name>
                <age>99</age>
                <city>Paris</city>
            </person>
            EOF;

            ...

            $person = $serializer->deserialize($data, '\Person', 'xml', ['allow_extra_attributes' => false]);
        answers:
            -   value:  It will throw a Symfony\Component\Serializer\Exception\ExtraAttributesException.
                correct: true
            -   value:  It will throw a Symfony\Component\Serializer\Exception\MissingPropertyException.
                correct: false
            -   value: It create a populated person object.
                correct: false

    -   question: |
            class Person {
                public $name;
                public $age;
            }

            $data = <<<EOF
            <person>
                <name>foo</name>
                <age>99</age>
                <city>Paris</city>
            </person>
            EOF;

            ...

            $person = $serializer->deserialize($data, '\Person', 'xml');
        answers:
            -   value:  It will throw a Symfony\Component\Serializer\Exception\ExtraAttributesException.
                correct: false
            -   value:  It will throw a Symfony\Component\Serializer\Exception\MissingPropertyException.
                correct: false
            -   value: It create a populated person object.
                correct: true
