category: 'Options Resolver'
questions:
    -
        question: 'What is the correct call of setAllowedTypes to validate the value null of the my_option option?'
        answers:
            -
                value: '$resolver->setAllowedTypes(''my_option'', ''null'');'
                correct: true
            -
                value: '$resolver->setAllowedTypes(''my_option'', array(null));'
                correct: false
            -
                value: '$resolver->setAllowedTypes(''my_option'', array(''null''));'
                correct: false
            -
                value: '$resolver->setAllowedTypes(''my_option'', null);'
                correct: false
    -
        question: 'Is it possible to define default values that depend on another option?'
        answers:
            -
                value: 'No'
                correct: false
            -
                value: 'Yes'
                correct: true
    -
        question: |
            With the following class:
            
            <?php
            use Symfony\Component\OptionsResolver\OptionsResolver;
            
            class Mailer
            {
                private $options;
            
                public function __construct(array $options = array())
                {
                    $resolver = new OptionsResolver();
                    $resolver->setDefaults(array(
                        'host'     => 'smtp.example.org',
                        'username' => 'user',
                        'password' => 'pa$$word',
                        'port'     => 25,
                    ));
            
                    $this->options = $resolver->resolve($options);
                }
            }
            
            what exception will be thrown while executing the code:
            
            $mailer = new Mailer(array(
                'usernme' => 'johndoe',
            ));
            
        answers:
            -
                value: 'A Symfony\Component\OptionsResolver\Exception\UndefinedOptionsException.'
                correct: true
            -
                value: 'A Symfony\Component\OptionsResolver\Exception\InvalidOptionsException.'
                correct: false
            -
                value: 'A Symfony\Component\OptionsResolver\Exception\NoSuchOptionException.'
                correct: false
            -
                value: 'A Symfony\Component\OptionsResolver\Exception\OptionDefinitionException.'
                correct: false
            -
                value: 'A Symfony\Component\OptionsResolver\Exception\MissingOptionsException.'
                correct: false
    -
        question: |
            With the following code:
            
            <?php
            // ...
            class Mailer
            {
                // ...
                public function configureOptions(OptionsResolver $resolver)
                {
                    // ...
                    $resolver->setDefault('encryption', null);
            
                    $resolver->setDefault('port', function () {
                        if ('ssl' === $options['encryption']) {
                            return 465;
                        }
            
                        return 25;
                    });
                }
            }
            
            what would be the resolved $options passed as:
            
            $options = array('encryption' => 'SSL');
            
        answers:
            -
                value: |
                    $options = array(
                        'encryption' => 'SSL',
                        'port' => null,
                    );
                    
                correct: false
            -
                value: |
                    $options = array(
                        'encryption' => 'SSL',
                        'port' => 465,
                    );
                    
                correct: false
            -
                value: |
                    $options = array(
                        'encryption' => 'SSL',
                        'port' => 25,
                    );
                    
                correct: false
            -
                value: |
                    $options = array(
                        'encryption' => 'SSL',
                        'port' => function () {
                                if ('ssl' === $options['encryption']) {
                                    return 465;
                                }
                    
                                return 25;
                            },
                    );
                    
                correct: true
    -
        question: 'Which of the following are true about Symfony\Component\OptionsResolver\Options?'
        answers:
            -
                value: 'The OptionsResolver class implements Options.'
                correct: true
            -
                value: 'It is an interface.'
                correct: true
            -
                value: 'It is an abstract class.'
                correct: false
            -
                value: 'The OptionsResolver class extends Options.'
                correct: false
    -
        question: 'How can you add an option named my_option without setting a default value?'
        answers:
            -
                value: '$resolver->setDefined(''my_option'');'
                correct: true
            -
                value: '$resolver->setNotRequired(''my_option'');'
                correct: false
            -
                value: '$resolver->setDefault(''my_option'');'
                correct: false
            -
                value: '$resolver->setDefault(''my_option'', null);'
                correct: false
    -
        question: 'What is the method one must call on an option resolver object to validate an array?'
        answers:
            -
                value: $resolver->resolve($options);
                correct: true
            -
                value: $resolver->validate($options);
                correct: false
            -
                value: $resolver->check($options);
                correct: false
    -
        question: 'What is the method one must call on an option resolver object to populate an array?'
        answers:
            -
                value: $resolver->resolve($options);
                correct: true
            -
                value: $resolver->populate($options);
                correct: false
            -
                value: $resolver->fill($options);
                correct: false
    -
        question: 'How can one require an option?'
        answers:
            -
                value: '$resolver->setRequired(''option'');'
                correct: true
            -
                value: '$resolver->setRequired([''option'']);'
                correct: true
            -
                value: '$resolver->require(''option'');'
                correct: false
            -
                value: '$resolver->require([''option'']);'
                correct: false
    -
        question: 'Is it possible to check if an option has been required by configuration?'
        answers:
            -
                value: 'Yes'
                correct: true
            -
                value: 'No'
                correct: false
    -
        question: 'Which methods can be used to check if an option has been required?'
        answers:
            -
                value: $resolver->getRequiredOptions()
                correct: true
            -
                value: '$resolver->isRequired(''option'')'
                correct: true
            -
                value: '$resolver->getOptionConfiguration()[''required'']'
                correct: false
            -
                value: $resolver->getRequired()
                correct: false
    -
        question: 'Which method can be used to check if an option has been provided for a required option?'
        answers:
            -
                value: '$resolver->isMissing(''option'')'
                correct: true
            -
                value: $resolver->getMissingOptions()
                correct: true
            -
                value: '$resolver->isOptionMissing(''option'')'
                correct: false
            -
                value: '$resolver->isRequired(''option'')'
                correct: false
            -
                value: '$resolver->getOptionConfiguration()[''missing'']'
                correct: false
            -
                value: $resolver->getOptionMetaData()
                correct: false
    -
        question: 'Does the component support validating the type of options?'
        answers:
            -
                value: 'Yes'
                correct: true
            -
                value: 'No'
                correct: false
    -
        question: 'Which of the following are validate to validate a type?'
        answers:
            -
                value: '$resolver->setAllowedTypes(''host'', ''string'');'
                correct: true
            -
                value: '$resolver->setAllowedTypes(''port'', [''null'', ''int'']);'
                correct: true
            -
                value: '$resolver->getOption(''host'')->setAllowedTypes(''string'');'
                correct: false
            -
                value: '$resolver->getOption(''port'')->setAllowedTypes([''null'', ''int'']);'
                correct: false
    -
        question: 'What type of exception is thrown when an option of the invalid type is passed to an object?'
        answers:
            -
                value: Symfony\Component\OptionsResolver\Exception\InvalidOptionsException
                correct: true
            -
                value: \InvalidArgumentException
                correct: false
            -
                value: Symfony\Component\OptionsResolver\InvalidArgumentException
                correct: false
    -
        question: 'Is it possible to append allowed types to an option?'
        answers:
            -
                value: 'Yes, by using the addAllowedTypes() method'
                correct: true
            -
                value: 'Yes, by using the appendAllowedTypes() method'
                correct: false
            -
                value: 'Yes, by using the allow*() methods'
                correct: false
            -
                value: 'No'
                correct: false
    -
        question: |
            What is the output of the following?
            
            class Mailer
            {
                private $host;
            
                public function __construct(array $options)
                {
                    $resolver = new OptionResolver();
                    $this->configureOptions($resolver);
            
                    $this->host = $resolver->resolve($options)['host'];
                }
            
                public function configureOptions(OptionsResolver $resolver)
                {
                    $resolver->setDefaults([
                           'encryption' => null,
                           'host' => 'example.org',
                    ]);
            
                    $resolver->setDefault('host', function (Options $options, $previousValue) {
                        if ('ssl' === $options['encryption']) {
                            return 'secure.example.org'
                        }
            
                        return $previousValue;
                    });
                }
            
                public function getHost()
                {
                    return $this->host;
                }
            }
            
            echo (new Mailer([]))->getHost();
            
        answers:
            -
                value: example.org
                correct: true
            -
                value: encryption
                correct: false
            -
                value: 'null'
                correct: false
            -
                value: 'There will be an error'
                correct: false
    -
        question: |
            What is the output of the following?
            
            class Mailer
            {
                // ...
            
                public function configureOptions(OptionsResolver $resolver)
                {
                    // ...
                    $resolver->setDefined('port');
                }
            
                // ...
                public function sendMail($from, $to)
                {
                    if (array_key_exists('port', $this->options)) {
                        echo 'Set!';
                    } else {
                        echo 'Not Set!';
                    }
                }
            }
            
            $mailer = new Mailer();
            $mailer->sendMail($from, $to);
            
        answers:
            -
                value: 'Not Set!'
                correct: true
            -
                value: Set!
                correct: false
    -
        question: |
            How could one improve the performance of a class which is instantiated multiple times which contains an
            option resolver?
            
        answers:
            -
                value: 'One could store the configured option resolver in a static class'
                correct: true
            -
                value: 'One could enable the option resolver cache'
                correct: false
            -
                value: 'One could create a single option resolver and configure it within each class'
                correct: false
    -
        question: |
            Which of the following are true about Symfony\Component\OptionsResolver\Options?

        answers:
            -
                value: 'It is an interface.'
                correct: true
            -
                value: 'It extends \Countable.'
                correct: true
            -
                value: 'It extends \ArrayAccess.'
                correct: true
            -
                value: 'The OptionsResolver class implements Options.'
                correct: true
            -
                value: 'It has a method called getOptions.'
                correct: false
            -
                value: 'It is an abstract class.'
                correct: false
            -
                value: 'The OptionsResolver class extends Options.'
                correct: false
    -
        question: |
            Which of the following methods does Symfony\Component\OptionsResolver\OptionsResolver contain?

        answers:
            -
                value: 'setDefault($option, $value)'
                correct: true
            -
                value: 'setDefaults(array $defaults)'
                correct: true
            -
                value: 'hasDefault($option)'
                correct: true
            -
                value: 'setRequired($optionNames)'
                correct: true
            -
                value: 'hasRequired($option)'
                correct: false
            -
                value: 'setRequiredOption($option).'
                correct: false
            -
                value: 'addDefined($option)'
                correct: false
    -
        question: |
            Which of the following methods does Symfony\Component\OptionsResolver\OptionsResolver contain?

        answers:
            -
                value: 'getMissingOptions()'
                correct: true
            -
                value: 'setDefined($optionNames)'
                correct: true
            -
                value: 'isDefined($option)'
                correct: true
            -
                value: 'getMissingOptions()'
                correct: true
            -
                value: 'getDefined()'
                correct: false
            -
                value: 'addDefined($option)'
                correct: false
    -
        question: |
            Which of the following methods does Symfony\Component\OptionsResolver\OptionsResolver contain?

        answers:
            -
                value: 'getMissingOptions()'
                correct: true
            -
                value: 'setDefined($optionNames)'
                correct: true
            -
                value: 'isDefined($option)'
                correct: true
            -
                value: 'getMissingOptions()'
                correct: true
            -
                value: 'getDefined()'
                correct: false
            -
                value: 'addDefined($option)'
                correct: false
    -
        question: |
            Which of the following methods does Symfony\Component\OptionsResolver\OptionsResolver contain?

        answers:
            -
                value: 'getDefinedOptions()'
                correct: true
            -
                value: 'setNormalizer($option, \Closure $normalizer)'
                correct: true
            -
                value: 'setAllowedValues($option, $allowedValues)'
                correct: true
            -
                value: 'addAllowedValues($option, $allowedValues)'
                correct: true
            -
                value: 'getAllowedValues($option)'
                correct: false
            -
                value: 'setNormalizer(\Closure $normalizer)'
                correct: false
    -
        question: |
            Which of the following methods does Symfony\Component\OptionsResolver\OptionsResolver contain?

        answers:
            -
                value: 'setAllowedTypes($option, $allowedTypes)'
                correct: true
            -
                value: 'addAllowedTypes($option, $allowedTypes)'
                correct: true
            -
                value: 'remove($optionNames)'
                correct: true
            -
                value: 'clear()'
                correct: true
            -
                value: 'resolve(array $options = array())'
                correct: true
            -
                value: 'getAllowedTypes($option)'
                correct: false
            -
                value: 'setNormalizer(\Closure $normalizer)'
                correct: false
