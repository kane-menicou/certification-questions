category: Validation
questions:
    -   question: |
            Is the following code correct ?

            namespace Acme\User;

            use Symfony\Component\Security\Core\User\UserInterface;
            use Symfony\Component\Validator\Constraints as Assert;

            /**
             * @Assert\GroupSequence({"Default", "User"})
             */
            class User implements UserInterface
            {
                /**
                * @Assert\NotBlank
                */
                private $username;

                /**
                * @Assert\NotBlank
                */
                private $password;

                /**
                 * @Assert\True(message="The password cannot match your username", groups={"Strict"})
                 */
                public function isPasswordLegal()
                {
                    return ($this->username !== $this->password);
                }

                // ...
            }
        answers:
            - {value: Yes, correct: false}
            - {value: No, correct: true}

    -   question: |
            Assuming that the validate() method detects no violations, what will the Response object contain?

            // Controller/BookController.php
            public function indexAction(
            {
                $book = new Book();
                $validator = $this->get('validator');
                $errors = $validator->validate($book);
                return new Response((string) $errors);
            }
        answers:
            - {value: "Notice: Array to string conversion.", correct: false}
            - {value: An empty string, correct: true}
            - {value: 'False', correct: false}
            - {value: "Fatal error: Object of class ConstraintViolationList could not be converted to string.", correct: false}

    -   question: "What does the CardScheme Constraint stand for ?"
        answers:
            - {value: It validates a credit card number, correct: false}
            - {value: It validates if a credit card is a VISA one, correct: true}
            - {value: It validates that a card number is valid for a given credit card company, correct: falseh}
            - {value: It doesn't exist, correct: false}

    -   question: |
            Will the following snippet throw an InvalidArgumentException ?

            use Symfony\Component\Validator\Validation;
            use Symfony\Component\Validator\Constraints\Blank;

            $expectedBlank = [];

            $validator = Validation::createValidator();
            $violations = $validator->validate($expectedBlank, [new Blank()]);

            if (0 !== count($violations)) {
                throw new InvalidArgumentException('The value is not blank !');
            }
        answers:
            - {value: Yes, correct: true}
            - {value: No, correct: false}

    -   question: |
            Which of the following values will fail Symfony\Component\Validator\Constraints\Blank's validation?
        answers:
            - {value: "''", correct: false}
            - {value: null, correct: false}
            - {value: '[]', correct: true}
            - {value: 'new \stdClass', correct: true}
            - {value: '0', correct: true}

    -   question: Which of the following can a contraint apply to?
        answers:
            - {value: Property, correct: true}
            - {value: public method whose name starts with "has", correct: true}
            - {value: public method whose name starts with "get", correct: true}
            - {value: public method whose name starts with "is", correct: true}

    -   question: Which of the following formats are available to define validation rules or constraints?
        answers:
            - {value: YAML, correct: true}
            - {value: Annotations, correct: true}
            - {value: XML, correct: true}
            - {value: JSON, correct: false}
            - {value: PHP, correct: true}

    -   question: |
            What are the validation groups defined by this code?

            <?php

            // src/Entity/User.php
            namespace App\Entity;

            use Symfony\Component\Security\Core\User\UserInterface;
            use Symfony\Component\Validator\Constraints as Assert;

            class User implements UserInterface
            {
                /**
                * @Assert\Email(groups={"registration"})
                */
                private $email;

                /**
                * @Assert\NotBlank(groups={"registration"})
                * @Assert\Length(min=7, groups={"registration"})
                */
                private $password;

                /**
                * @Assert\Length(min=2)
                */
                private $city;
            }
        answers:
            - {value: registration, correct: true}
            - {value: User, correct: true}
            - {value: default, correct: false}
            - {value: Default, correct: true}
            - {value: user, correct: false}


    -   question: |
            Which of the following are valid values for the type option of the Symfony\Component\Validator\Constraints\Type
            validation constraint ?
        answers:
            - {value: xml, correct: false}
            - {value: digit, correct: true}
            - {value: alpha, correct: true}
            - {value: integer, correct: true}
            - {value: email, correct: false}
            - {value: graph, correct: true}

    -   question: Which of the following elements can contain validation constraints?
        answers:
            - {value: Public getters/issers, correct: true}
            - {value: Classes, correct: true}
            - {value: Private and protected properties, correct: false}
            - {value: Public properties, correct: true}
            - {value: Private and protected getters/issers, correct: false}

    -   question: |
            With this following simple code:

            use Symfony\Component\Validator\Validation;

            $validator = Validation::createValidator();

            Which variables types this $validator object can validate ?
        answers:
            - {value: objects, correct: false}
            - {value: arrays, correct: true}
            - {value: strings, correct: true}
            - {value: numbers, correct: true}
